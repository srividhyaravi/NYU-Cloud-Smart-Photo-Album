AWSTemplateFormatVersion: 2010-09-09
Transform: "AWS::Serverless-2016-10-31"
Description: Cloud formation



Resources:
# Front-end bucket
  S3BUCKET1:
    Type: 'AWS::S3::Bucket'
    Properties:
        BucketName: smart-photo-album-1-nyu
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html

# Photos bucket
  S3BUCKET2:
    Type: 'AWS::S3::Bucket'
    Properties: 
        BucketName: photos-album-1-1-nyu
        AccessControl: Private
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false


# API Gateway 
  RestApiPhotoAlbum:
    Type: AWS::ApiGateway::RestApi
    Properties:
      BodyS3Location:
        Bucket: 'cloudformation-lexlambda-nyu'
        Key: 'swagger.yaml'
      Description: "Rest api having search photos and upload photos methods."
      Name: RestApiPhotoAlbum
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
          - "REGIONAL"


# API Gateway Role with policies
  ApiGatewayAccess:
      Type: AWS::IAM::Role
      Properties:
          Path: /
          AssumeRolePolicyDocument:
              Version: 2012-10-17
              Statement:
                  - Principal:
                        Service:
                            - apigateway.amazonaws.com
                    Effect: Allow
                    Action: 
                        - sts:AssumeRole
          Policies:
              - PolicyName: s3-put-policy
                PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                      - Effect: Allow
                        Action:
                        - s3:*
                        - s3-object-lambda:*
                        Resource: "*"
          ManagedPolicyArns:
           - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
           - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
  
  
# Lambda Role with policies for function IndexPhotosLambda
  IndexPhotosRole:
            Type: "AWS::IAM::Role"
            Properties:
              AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
                    Action:
                      - "sts:AssumeRole"
              Description: "The execution role for the lambda function index-photos."
              Path: "/"
              ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                - "arn:aws:iam::aws:policy/AmazonRekognitionReadOnlyAccess"
                - "arn:aws:iam::aws:policy/AmazonRekognitionFullAccess"
                - "arn:aws:iam::aws:policy/service-role/AmazonRekognitionServiceRole"
                - "arn:aws:iam::aws:policy/AmazonRekognitionCustomLabelsFullAccess"
              Policies:
                - PolicyName: "LambdaPolicy"
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Effect: Allow
                        Action:
                          - s3:GetObject
                        Resource: "arn:aws:s3:::photos-album-1-1"
                      - Effect: Allow
                        Action:
                          - rekognition:DetectLabels
                        Resource: "*"
                      - Effect: Allow
                        Action:
                          - es:ESHttpPut
                          - es:ESHttpPost
                        Resource: "*"

              RoleName: "IndexPhotosRole"


# Lambda Role with policies for function SearchPhotosLambda
  SearchPhotosRole:
          Type: "AWS::IAM::Role"
          Properties:
            AssumeRolePolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Principal:
                    Service:
                      - lambda.amazonaws.com
                  Action:
                    - "sts:AssumeRole"
            Description: "The execution role for the lambda function search-photos."
            Path: "/"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/AmazonLexFullAccess"
              - "arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess"
            Policies:
              - PolicyName: "LambdaPolicy"
                PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                  - Effect: Allow
                    Action: logs:CreateLogGroup
                    Resource: arn:aws:logs:us-east-1:978364673633:*
                  - Effect: Allow
                    Action:
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    Resource:
                    - arn:aws:logs:us-east-1:978364673633:log-group:/aws/lambda/search-photos:*
        
            RoleName: "SearchPhotosRole"
  
#Lambda function for index photos
  IndexPhotosLambda:
      Type: AWS::Lambda::Function
      Properties:
          Code:
              S3Bucket: 'cloudformation-lexlambda-nyu'
              S3Key: 'index-photos.zip'
          Handler: lambda_function.lambda_handler
          Role: !GetAtt IndexPhotosRole.Arn
          Runtime: python3.7
          Timeout: 300
          TracingConfig:
              Mode: Active

#Lambda function for search photos
  SearchPhotosLambda:
    Type: AWS::Lambda::Function
    Properties:
        Code:
            S3Bucket: 'cloudformation-lexlambda-nyu'
            S3Key: 'search-photos.zip'
        Handler: lambda_function.lambda_handler
        Role: !GetAtt SearchPhotosRole.Arn
        Runtime: python3.7
        Timeout: 300
        TracingConfig:
            Mode: Active
  ES:
    Type: AWS::Elasticsearch::Domain
    Properties:
      DomainName: 'photo-new'
      AccessPolicies:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              AWS: '*'
            Action: 'es:*'
            Resource: 'arn:aws:es:us-east-1:589118421876:domain/photos/*'
      EncryptionAtRestOptions:
        Enabled: true
      NodeToNodeEncryptionOptions:
        Enabled: true
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: true
        MasterUserOptions:
          # MasterUserARN: String
          MasterUserName: roshnisen
          MasterUserPassword: #Cloudtest123
      DomainEndpointOptions:
          # CustomEndpoint: String
          # CustomEndpointCertificateArn: String
          # CustomEndpointEnabled: Boolean
          EnforceHTTPS: true
          # TLSSecurityPolicy: String

      ElasticsearchClusterConfig:
        DedicatedMasterEnabled: 'false'
        InstanceCount: '1'
        ZoneAwarenessEnabled: 'false'
        InstanceType: 't3.small.elasticsearch'
      EBSOptions:
        EBSEnabled: true
        Iops: 0
        VolumeSize: 10
        VolumeType: 'gp2'
      ElasticsearchVersion: '7.1'
